在复杂的业务场景下，单纯依靠存储系统的性能提升不够，典型的场景有：
（1）需要经过复杂运算后得出的数据，存储系统无能为力。
（2）读多写少的数据，存储系统有心无力

缓存就是为了弥补存储系统在这些复杂业务场景的不足，其基本原理是将可能重复使用的数据放到内存中，一次生成、多次使用，避免每次使都去访问存储系统。

缓存的架构设计要点；
1、缓存穿透
        指缓存没有发挥作用，业务系统虽然去缓存查询数据，但缓存中没有数据，业务系统需要再次去存储查询数据。通常有两种情况：
（1）存储数据不存在
（2）缓存数据生成耗费大量时间或者资源

具体场景：
（1）分页缓存的有效期设置为1天，因为设置太长时间的话，缓存不能反应真实的数据。
（2）通常情况下，用户不会从第一页到最后1页全部看完，一般用户访问集中在前10页，因此第10页以后的缓存过期失效的可能性很大。
（3）金正对手每周来爬取数据，爬虫将所有分类的所有数据全部遍历，从第一页到最后1页都会读取，此时很多分页缓存可能都失效。
（4）由于很多分页都没有缓存数据，从数据库重生成缓存数据有非常耗费性能，因此爬虫会讲整个数据库全部拖慢。

2、缓存雪崩
指的是当缓存失效（过期）后引起系统性能急剧下降的情况。
缓存雪崩常见解决方法有两种：
（1）更新锁机制：针对分布式集群的业务系统要实现更新锁的机制，需要用到分布式锁，如zookeeper。
（2）后台更新机制：由后台线程来更新缓存，而不是有业务线程来更新缓存，缓存本省的有效期设置为永久，后台线程定时更新缓存。
后台定时更新机制需要考虑一种特殊的场景，当缓存系统内存不够时，会“踢掉”一些缓存数据，从缓存被“踢掉”到下一次定时更新缓存的这段时间内，业务线程读取缓存返回空值，而业务现成本省又不会去更新缓存，因此业务上看到的现象就是数据丢了。解决的方式有两种：
1）后台线程除了定时缓存，还要频繁地去读取缓存，如果发现缓存被踢了就立刻更新缓存，这种方式实现简单，但读取时间间隔不能设置太长，因为如果缓存被踢了，缓存读取间隔时间太长，这段时间内业务访问都拿不到真正的数据而是一个空的缓存值，用户体验一般。
2）业务线程发现缓存失效后，通过消息队列发送一条消息通知后台线程更新缓存。

3、缓存热点
缓存热点的解决方案：复制多分缓存副本，将请求分散到多个缓存服务器上，减轻缓存热点导致的单台缓存服务器压力。

缓存副本设计有一个细节需要注意：不同的缓存副本不要设置统一的过期时间，否则就会出现所有缓存副本同时生成同时失效的情况，从而导致缓存雪崩效应。正确的做法：设定一个过期时间范围，不同的缓存副本的过期时间方位内的随机值。

4、实现方式
缓存的各种访问策略和存储的访问策略是相关的，上面的各种缓存设计方案通常情况下都是集成在存储访问方案中，可以采用“程序代码实现”的中间层方式，也可以采用独立的中间件来实现。


