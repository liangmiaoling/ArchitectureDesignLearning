异地多活方案主要应对系统级的故障。如机器宕机、机房故障、网络故障等问题。
在实际业务运行过程中，接口级的故障，这种故障影响没有系统级的故障那么大，但概率很高。

接口级的故障典型表现：系统并没有宕机，网络也没有中断，但业务却出现问题。

导致接口级故障的原因有下面几种：
1、内部原因
2、外部原因
解决接口级故障的核心思想：优先保证核心业务和优先保证绝大部分用户。
（1）降级：指系统将某些业务或者接口的功能降低，可以是只提供部分功能，也可以是完全停掉所有功能。
降级的核心思想：丢车保帅，优先保证核心业务
常见实现降级的方式：
    1）系统后门降级。系统预留了后门用于降级操作。
    2）独立降级系统。将降级操作独立到一个单独的系统中，可以试想复杂的权限管理、批量操作等功能。
（2）熔断
降级的目的在于应对系统自身的故障，熔断的目的在于应对依赖的外部系统故障的情况。
熔断机制实现的关键：
    1）需要一个统一的API调用层，由API调用层来进行采用或者统计，如果接口调用散落在代码各处就没法进行统一处理。
    2）阈值的设计。实践中一般都是先根据分析确定阈值，然后上线观察效果，在进行调试。
（3）限流
降级是从系统功能设计的角度考虑如何应对故障，而限流是从用户访问压力的角度来考虑如何应对故障。
限流：只允许系统能够承受的访问量进来，超出系统访问能力的请求将被丢弃。
常见的限流方式：基于请求限流和基于资源限流
1）基于请求限流：指从外部访问的请求角度考虑限流。
常见的方式：a)限制总量：限制某个指标的累计上限，常见的限制当前系统服务的用户总量。
                      b)限制时间量：限制一段时间内某个指标的上限。
为了找到合理的阈值，通常情况下你可以采用性能压测来确定阈值，但性能压测也存在覆盖场景有限的问题，可能出现某个性能压测没有覆盖的功能道正系统压力很大；另外一种是逐步优化（即先设定一个阈值然后上线观察运行情况，发现不合理就调整阈值）。
2）基于资源限流：找到系统内部影响性能的关键资源，对其使用上限进行限制。
常见的内部资源：连接数、文件句柄、线程数、请求队列等。

（4）排队
排队是限流的一个变种，限流是直接拒绝用户，排队是让用户等待一段时间。
