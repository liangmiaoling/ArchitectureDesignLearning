结合复杂度来源和设计原则，在实践中究竟如何架构设计。架构设计流程如下：
* 识别复杂度
* 设计备选方案
* 评估和选择备选方案
* 详细方案设计


一、架构设计第一步：识别复杂度

架构设计的本质目的是为了解决软件系统的复杂性，所以在我们设计架构时，首先就是分析系统的复杂性。

正确的做法是：
    将主要的复杂度问题列出来，然后根据业务、技术、团队等综合情况进行排序，优先解决当前面临的最主要的复杂度问题。
有经验的架构师可能一看需求就知道复杂度大概在哪里，如果经验不足，那只能采取“排查法”，从不同的角度逐一进行分析。

识别复杂度实践：
    TPS、QPS具体解释请看章节“【架构系统学习笔记】相关术语：系统吞吐量（TPS）、用户并发量、性能测试概念和公式”。
    

二、架构设计第二步：设计备选方案

成熟的架构师需要对一经存在的技术非常熟悉，一已经经过验证的架构模型烂熟于心，然后根据自己对业务的理解，挑选合适的架构模式进行组合，再对组合厚德方案进行修改和调整。

新技术都是在享有技术的基础上发展起来的，现有技术有来源与先前的技术。将技术进行功能分组，可以大大简化设计过程，这是技术“模块化”的首要原因。技术的“组合”和“递归”特征，将彻底改变我们对技术本质的认识。

容易犯错的地方：
（1）设计最优秀的方案。
应该根据架构设计原则中“合适原则”和“简单原则”的要求，挑选合适自己业务、团队、技术能力的方案才是好方案；否则要么浪费大量资源开发了无用的系统。
（2）只做一个方案。
这样做的弊端：心里评估过于简单，可能没有想得全面；架构师再怎么牛，经验知识和技能也有局限，有可能某个评估的标准或者经验是不正确的，或者是老的经验不适合新的情况，甚至有的评估表针是架构师自己原来的就理解错了；单一方案设计出现过度辩护的情况。

架构师需要设计多个备选方案，合理的做法应该是：
* 备选方案的数量以3-5个为最佳。
* 备选方案的差异要比较明显。
* 备选方案的技术不要只局限于已经熟悉的技术。

（3）备选方案过于详细。
        弊端：耗费了大量的时间和精力；忽略了整体的技术设计；评审的时候其他人会被很多细节给绕进去，评审效果很差。
        正确的做法是备选阶段关注的是技术选型，而不是技术细节，技术选型的差异要比较明显。

设计备选方案实践：
如：
1、备选方案1：采用开源的kafka
2、备选方案2：集群+MySQL存储
3、备选方案3：集群+自研存储方案

三、架构设计第三步：评估和选择备选方案

    如何挑选出最终的方案也是一个很大的挑战，主要原因：
    1）每个方案都是可行，如果方案不可行就根本不应该作为备选方案。
    2）没有哪个方案是完美的。
    3）评价标准主观性比较强。
在实践中很多设计师或者架构师就采取了下面几种指导思想：
    1）最简派：设计师挑选一个看起来最简单的方案。
    2）最牛派：最牛派的做法和最减排正好相反，设计师会倾向于挑选技术上看起来最牛的方案。
    3）最熟派：设计师基于自己的过往经验，挑选自己最熟悉的方案。
    4）领导派：领导派列出备选方案，设计师自己拿捏不定，然后就让领导来定夺，反正最后方案选的对那是领导厉害，方案选的不对怎么办？那也是领导背黑锅。

“360度环评”：
具体的操作方式：列出我们需要关注的质量属性点，然后分别从这些质量属性的维度去评估每个方案，再综合挑选适合当时情况的最优方案。

常见的方案质量属性点有：性能、可用性、硬件成本、项目投入、复杂度、安全性、可扩展性等。
在评估这些质量属性时，需要遵循架构设计原则1“合适原则”和原则2“简单原则”，避免贪大求全，基本上某个质量属性能够满足一定时期内业务发展就可以了。

有的设计师会担心：如果我们运气真的很好，业务直接一年翻了10倍，TPS从1000上升到10000，又要重新做方案？
这种情况确实有可能存在，但概率很小，如果每次做方案都考虑这种小概率事件，我们的方案会出现过渡设计，导致投入浪费。考虑这个问题的时候，需要遵循架构设计原则3“演化原则”，避免过渡设计、一步到位的想法。

通常情况下，如果某个质量属性评估和业务发展有关系，需要评估未来业务发展的规模时，一种简单的方式是将当前的业务发展的规模乘以2-4即可，如果现在的基数较低，可以乘以4；如果现在基数较高，可以乘以2。
当然，最理想的情况是设计一个方案，能够简单地扩容就能够跟上业务的发展。

误区：
面临这种选择上的困难，有几种看似正确但实际错误的做法：
1）数量对比法：简单地看哪个方案的优点多就选哪个。这种方案主要的问题在于把所有质量属性的重要性等同，而没有考虑质量属性的优先级。其次，有时候会出现两个方案的有点数量是一样的情况。
2）加权法：每个质量属性给一个权重，例如性能的权重高中低分别得10分、5分、3分，成本权重高中低分别是5分、3分、1分，然后将每个方案的权重得分加起来，最后看哪个方案的权重得分最高就选哪个。
这种方案主要的问题是无法客观地给出每个质量属性的权重得分。

正确的做法：按优先级选择，即架构师综合当前的业务发展情况、团队人员规模和技能、业务发展预测等因素，将质量属性按照优先级排序，
首先，挑选满足第一优先级的，如果方案满足，那就再看第二优先级......以此类推。

评估和选择备选方案实战

四、架构设计流程第四步：详细方案设计

详细设计方案设计就是将方案涉及的关键技术细节给确定下来。

（1）假如我们确定使用elasticsearch来做全文搜索，那么就需要确定elastic search的索引是按业务划分，还是一个大索引就可以。（elasticsearch做全文搜索解决方案，前提必须是架构师自己对其的设计原理有深入的理解，比如索引、副本、集群等技术点）
（2）假如我们确定使用MySQL分库分表，那么就需要确定那些表要分库分表，按照什么维度来分库分表，分库分表联合查询怎么处理等。
（3）假如我们确定引入Nginx来做负载均衡，那么Nginx的主备怎么做，Nginx的负载均衡策略用哪个（权重分配、轮询？IP_hash？）等。

例如Nginx的负载均衡策略，简单按照下面的规则选择：
（1）轮询（默认）
        每个请求按时间顺序逐一分配道不同的后端服务器，后端服务器分配的请求数基本一致，如果后端服务端“down掉”，能自动剔除。
（2）加权轮询
        根据权重来进行轮询，权重高的服务器分配的请求更多，主要适应于后端服务器性能不均的情况，如新老服务器混用。
（3）IP_hash
        每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，主要用于解决session的问题。
（4）url_hash
    按访问URL的hash结果分配请求，每个URL定向到同一个后端服务器，适用于后端服务器能够将URL的响应结果缓存的情况。

详细设计方案阶段可能遇到的一种极端情况就是再详细设计阶段发现备选方案不可行，一般情况下主要的原因是备选方案设计时遗漏了某个关键技术或者关键的质量属性。

    如果项目的主要失误是在备选方案评估时忽略了开发周期这个质量属性。可以通过下面方式有效地避免：
    （1）架构师不但要进行备选方案设计和选型，还需要对备选方案的关键细节有较深的理解。
    （2）通过分步骤、分阶段、分系统等方式，尽量降低方案复杂度，方案本身的复杂度越高，某个细节推翻整个方案的可能性就越高，适当降低复杂性，可以减少这种风险。
    （3）如果方案本身就很复杂，那就采取设计团队的方式来进行设计，博采众长，汇集大家的智慧和经验，防止只有1-2个架构师可能出现的思维盲点或者经验盲区。

    详细设计方案实践：
细化设计点：
（1）细化设计点1：数据库表如何设计？
       1） 数据库设计两类表，一类是日志表，用于消息写入时快速存储MySQL中；另一类是消息表，每个消息队列一张表。
        2）业务系统发布消息时，首先写入到日志表，日志表写入成功就代表消息写入成功；后台线程再从日志表中读取消息写入记录，将消息内容写入到消息表中。
        3）业务系统读取消息时，从消息表中读取。
        4）日志表表名为MQ_LOG，包含字段：日志ID、发布者信息，发布时间、队列名称、消息内容。
        5）消息表表名是队列名称，包含字段：消息ID（递增生成）、消息内容、消息发布时间、消息发布者。
        6）日志表需要及时清除已经写入消息表的日志数据，消息表最多保存30天的消息数据。
（2）细化设计点2：数据如何复制？
        直接采用MySQL主从复制即可，只复制消息存储表，不复制日志表
（3）细化设计点3：主备服务器如何倒换？
        采用zookeeper来做主备决策，主备服务器都连接到zookeeper建立自己的节点，主服务器的路径规则为“/MQ/server/分区编号/master”,备机为“/MQ/server/分区编号/slave”，节点类型为EPHEMERAL
        备机监听主机的节点消息，当发现主服务器节点断链后，备服务器修改自己的状态，对外提供消息读取服务。
（4）细化设计点4：业务服务器如何写入消息
        1）消息队列系统设计两个角色：生产者和消费者，每个角色都有唯一的名称。
        2）消息队列系统提供SDK供各业务系统调用，SDK从配置中读取所有消息队列系统的服务信息，SDK采用轮询算法发起消息写入请求给主服务器。
（5）细化设计点5：业务服务器如何读取消息？
        1）消息队列系统提供SDK供业务系统调用，SDK从配置中读取所有消息队列系统的服务器信息，轮流向所有服务器发起消息读取请求。
        2）消息队列服务器需要记录每个消费的消费状态，即当前消费者已经读取到了哪条消息，当手气消息读取请求时，返回下一条未被读取的消息给消费者。
（6）细化设计点6：业务服务器和消息队列服务器之间的通信协议如何设计？
        考虑到消息队列系统后续可能会对接多种不同编程语言编写的系统，为了提升兼容性，传输协议用TCP，数据格式为protocolBuffer.
