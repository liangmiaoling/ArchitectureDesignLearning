架构设计领域并没有一套通用的规范来指导架构师进行架构设计，更多是依赖架构师的经验和直觉，因此架构设计有时候也会被看作一项比较神秘的工作。
面对不确定性的3原则。
共性原则：
            合适原则
            简单原则
            演化原则

这几个原则的优先级：合适优于先进》演化优于一步到位》简单优于复杂

架构设计时遵循这几个原则，有助于你做出最好的选择。

一、合适原则
    合适原则宣言：“合适优于业界领先”。
    脚踏实地实现，主要体现在下面几个方面：    
    （1）将军难打无兵之战
    （2）罗马部署一天建成的
            没有那么多积累，却想一步登天，是失败的第二个主要原因。
    （3）冰山下面才是关键
            没有那么卓越的业务场景，却幻想灵光一闪成为天才，是失败的第三个主要原因。
     真正优秀的架构都是在企业当前人力、条件、业务等各种约束下设计出来的，能够合理地将资源整合在一起并发出最大功效，并且能够快速落地。

二、简单原则
    简单原则宣言：“简单优于复杂”。
    软件领域的复杂性体现两方面：
    1、结构的复杂性。
        具备两个特点：组成复杂系统的组件数量更多；同时这些组件之间的关系也更加复杂。
        复杂性存在问题1：组件越多，就越有可能其中某个组件出现故障，从而导致系统故障。
        复杂性存在问题2：某个组件改动，回应相关联的所有组件，这些被影响的组件同样会继续递归影响更多的组件。这个问题会影响整个系统的开发效率，因为一旦变更设计外部系统，需要协调各方同意进行方案评估、资源协调、上线配合。
        复杂性存在问题3：定位一个复杂系统中的问题总是比较简单系统更加困难。
    2、逻辑的复杂性：
        如果只有一个组件，即系统本身，所有的功能和逻辑都在这个组件中实现，是行不通的，原因在于除了结构复杂性，还有逻辑复杂性。

 三、演化原则
        演化原则宣言：“演化优于一步到位”。
        对于建筑来说，永恒是主题；对于软件来说，变化才是主题。
        考虑到软件架构需要根据业务发展不断变化这个本质贴点，软件架构设计其实更加类似于大自然“设计”一个生物，通过眼花让生物适应环境，逐步变得更加强大：
        （1）生物要适应当时的环境
        （2）生物需要不断地繁殖，将有利的基因传递下去，将不利的基因剔除或者修复。
        （3）当环境变化时，生物要能够快速改变以适应环境变化；如果生物无法调整就被自然淘汰；新生物会保留一部分原来被淘汰生物的基因。

        软件架构设计同样是类似的过程：
        （1）设计出来的架构要满足当时的业务需要
        （2）机构要不断地在实际应用过程中迭代，保留优秀的设计，修复有缺陷的设计，改正错误的设计，去掉无用的设计，使得架构逐渐完善。
        （3）当业务发生变化时，架构要扩展、重构，甚至重写；代码也许会重写，但有价值的经验、教训、逻辑、设计等却可以在新架构中延续。
        架构师在进行架构设计时需要牢记这个原则，时刻提醒自己不要贪大求全，或者盲目照搬大公司的做法。


案例

合适原则、简单原则、演化原则，指导我们设计出合适的架构，即使是代表中国互联网技术最顶尖水平的BAT，其架构的发展历程也同样遵循这三条原则。

淘宝

内容摘自《淘宝技术发展》：

“个人网站”——》“Oracle/支付宝/旺旺” ——》“Java时代1.0” ——》“Java时代2.0”——》“Java时代3.0”——》“分布式时代”

每个阶段的驱动力是什么？

（1）“个人网站”： 在这个阶段主要解决快速上线的问题。
（2）“Oracle/支付宝/旺旺”：这个阶段解决业务飞速发展，支撑业务的问题。
（3）“Java时代1.0”：这个阶段主要解决原有的技术PHP与数据库链接产生死锁的技术问题，用Java代替PHP。同时Java是当时最成熟的网站开发语言。这方面的人才比较多。
（4）“Java时代2.0”：这个阶段主要是从技术和整体架构层面做了很多优化工作。引入了spring、加入了缓存、加入了CDN、采用开源的JBOSS，主要提高容量、提高性能、节约成本来做的。
（5）“Java时代3.0”及“分布式时代”：这个阶段淘宝从商用转为自研，典型的就是去IOE化。


手机QQ：
内容摘自《QQ1.4亿在线背后的故事》。
手机QQ的发展历程按照用户规模可以粗略划分为4个阶段：十万级、百万级、千万级、亿万级，不同的用户规模，IM后台的架构也不同，而且基本上都是用户规模先上去，让后产生各种问题，倒逼技术架构升级。



架构设计原则：
1）合适优于业界领先
2）演化优于过度设计
3）简单优于复杂
4）重构优于重写
5）硬件优于人工
6）业务优于技术
7）存储优于运算
8）技术优于流程
9）优化优于重构


















