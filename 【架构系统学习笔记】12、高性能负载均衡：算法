根据算法期望达到的目的，大体上可以分为下面几类：
（1）任务平分类：负载均衡系统将受到的任务平均分配给服务器进行处理，这里的平均可以是绝对数量的平均，也可以是比例或者权重上的平均。
（2）负载均衡类：负载均衡系统根据服务器的负载来进行分配，这里的负载并不一定是通常意义上我们说的“CPU负载”，而是系统当前的压力，可以用连接数、I/O使用率、网卡吞吐率等来衡量系统的压力。
（3）性能最优类：负载均衡系统根据服务器的响应时间来进行任务分配，优先将新任务分配给相应最快的服务器。
（4）Hash类：负载均衡系统根据任务中的某些关键信息进行Hash运算，将相同Hash值的请求分配到同一台服务器上。常见的有源地址Hash、目标地址Hash、session id hash、用户ID Hash等。

一、轮询
负载均衡系统收到请求后，按照顺序轮流分配到服务器上。
轮询是最简单的一个策略，无须关注服务其本身的状态。
需要注意的是负载均衡系统无须关注“服务器本省的状态”，这里的关键词是“本身”。也就是说，只要服务器在运行，运行状态是不关注的。

二、加权轮询
负载均衡系统根据服务器权重进行任务分配，这里的权重一般是根据硬件配置进行金泰配置的，采用动态的方式计算会更加契合服务，但复杂度业务更高。
加权轮询的主要目的就是为了解决不同服务器处理能力有差异的问题。
加权轮询解决了轮询算法中无法根据服务器的配置差异进行任务分配的问题，但同样存在无法根据服务器的状态进行任务分配的问题。

三、负载最低优先
负载均衡系统将任务分配给当前负载最低的服务器，这里的负载根据不同的任务类型和业务场景，可以用不同的指标来衡量。

负载最低优先的算法解决了轮询算法中无法感知服务器状态的问题，由此带来的代价是复杂度要增加很多。
（1）最少连接数有限的算法要求负载均衡系统统计每个服务器当前建立的链接，其应用场景仅限于负载均衡接收的任何链接请求都会妆发给拂去其进行处理，否则如果负载均衡系统和服务器之间是固定的链接池方式，就不适合采取这种算法。
（2）CPU负载优先的算法要求负载均衡系统以某种方式收集每个服务器的CPU负载，而且要确定是以1分钟的负载为标准，还是以15分钟的负载要好或者差。不同业务优先的时间间隔是不一样的，时间间隔太短容易造成频繁波动，时间间隔太长又可能造成峰值来临时响应缓慢。

四、性能最优类
负载均衡最低优先类算法是站在服务器的角度来进行分配的，而性能最优优先类算法则是站在客户端的角度来进行分配的，优先将任务分配给处理速度最快的服务器，通过这种方式达到最快响应客户端的目的。

五、Hash类
负载均衡系统根据任务重的某些关键信息进行Hash运算，将相同Hash值的请求分配到同一台服务器上，这样做的目的主要是为了满足特定的业务需求。
（1）源地址Hash
将来源于同一个源IP地址的任务分配给同一个服务进行处理，适合与存在事务、会话的业务。
（2）ID Hash
将某个ID标识的业务分配到同一个服务器中进行处理，这里的ID一般是临时型数据的ID。

案例：微信公开的技术文档，微信红包高并发
