高性能架构的设计，主要集中在两方面：
（1）尽量提升单服务器的性能，将单服务器的性能发挥到极致。
（2）如果单服务器无法支撑性能，设计服务器集群方案。
架构设计决定了系统性能的上限，实现细节决定了系统性能的下限。

单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点：
（1）服务器如何管理连接。
（2）服务器如何处理请求。
以上两个设计点最终都和操作系统的I/O模型及进程模型相关。
（1）I/O模型：堵塞、非堵塞、同步、异步。
（2）进程模型：单进程、多进程、多线程。

参考《UNIX网络编程》

一、PPC
PPC是process per connection的缩写，其含义是指每次有新的连接就新建一个进程去专门处理这个连接的请求，这是传统的UNIX网络服务器所采用的模型。

这种模式的弊端：
（1）fork代价高
（2）父子进程通信复杂
（3）支持的并发连接数量有限

prefork,是解决fork代价高、用户访问时可能感觉比较慢的问题。
prefork就是提前创建进程。
和PPC一样，还是存在父子进程通信复杂、支持的并发连接数量有限的问题，目前实际应用也不多。Apache服务器提供了MPM prefork模式，推荐在需要可靠性或者旧软件兼容的站点时采用这种模式，默认情况下最大支持256个并发连接。

二、TPC
TPC 是Thread Per Connection的缩写，其含义是指每次新的链接就新建一个线程去专门处理这个链接的请求。TPC实际上是解决或者弱化了PPC fork 代价高的问题和父子进程通信复杂的问题。
TPC解决了fork代价高和进程通信复杂的问题，但同时也引入了新的问题，具体表现在：
（1）创建线程虽然比创建进程代价低，但并不是没有代价，高并发时（例如每秒上万连接）还是有性能问题。
（2）无须进程间通信，但是线程间的互斥和国内共享又引入了复杂度，可能一不小心导致死锁问题。
（3）多线程会出现互相影响的情况，某个线程出现异常时，可能导致整个进程退出。

prethread
能够解决在TPC模式中，连接进来时才创建新额线程来处理连接请求，比创建进程轻量级，但还是有一定的代价的问题。

prethread模式会余弦创建线程，然后才开始接受用户的请求，当有新的链接进来的时候，就可以省去创建线程的操作，让用户感觉更快、体验更好。
常见的实现方式：
（1）主进程accept，然后将连接交给某给线程处理。
（2）子线程都尝试取accept，最终只有一个线程accept成功。

Apache服务器提供了MPM prefork模式，默认情况下最大支持16*25=400个并发连接。

单服务器高性能的PPC和TPC模式，他们的优点是实现简单，缺点是无法支撑高并发的场景，尤其是互联网发展到现在，各种海量的用户业务的出现，PPC和TPC完全无能为力。

补充：
不同并发模式的选择，还要考察三个指标，分别是响应时间（RT）,并发数、吞吐量。三者关系，
吞吐量=并发数/平均响应时间。
不同类型的系统，对三个指标要求不同，三高系统，比如秒杀、及时通信、不能使用。
三低系统，比如ToB系统、运营类、管理类系统，一般可以使用。
高吞吐系统，如果内存计算为主的，一般可以使用，如果网络IO为主的，一般不能使用。

高并发需要根据两个条件划分：连接数量、请求数量。




