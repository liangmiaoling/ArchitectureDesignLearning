存储高可用方案的本质都是通过将数据复制到多个存储设备，通过数据冗余的方式来实现高可用，其复杂性主要体现在如何应对复制延迟和终端导致的数据不一致问题。

一个高可用存储方案，我们需要从以下几个方面去进行思考和分析：
（1）数据如何复制？
（2）各个阶段的职责是什么？
（3）如何应对复制延迟？
（4）如何应对复制中断？

常见的高可用存储架构有主备、主从、主主、集群、分区，每种根据业务的需求进行一些特殊的定制化功能，有此衍生出更多的变种。由于不同业务的定制功能难以通用化，现在作者针对业界通用的方案分析常见的双击高可用架构：主备、主从、主备/主从切换和主主。

一、主备复制
主备复制是常见的最简单的一中存储可用方案，几乎所有的存储系统都提供了主备复制的功能，mysql\redis\monigoDB等。
1、基本实现
主备架构图逻辑关系：
客户端—>主机（->：读&写）
主机—>备机（->：数据复制）
客户端- ->备机（- ->：读&写（人工恢复））

主备架构中的“备机”主要是起到一个备份作用，不承担实际的业务数据读写操作。
2、优缺点分析
优点：（1）对于客户端来说，不需要感知备机的存在，即使灾难回复后，原来的备机被人工修改为主机后，对于客户端来说，只是认为主机的地址换了而已，无须知道是原来的备机升级为主机。
（2）对于主机和备机来说，双方只需要进行数据复制即可，无需进行状态判断和主备切换这类复制的操作。
缺点：（1）备机没有提供读写操作，硬件成本上有浪费。
（2）故障后需要人工干预，无法自动恢复。
作者综合主备复制架构的优缺点，内部的后台管理系统使用主备复制架构的情况会比较多，如学生管理系统、员工管理系统、假期管理系统等。这类系统数据变更频率低。

二、主从复制
主从复制指主机负责读写操作，从机只负责读操作，不负责写操作。
1、基本实现
主从复制架构图逻辑关系：
客户端—>主机（->：读&写）
主机—>从机（->：数据复制）
客户端- ->从机（->：读）
与主备复制架构主要差别点在于：从机正常情况下也是要提供读的操作。
2、优缺点分析
主从复制与主备复制相比，优点有：
（1）主从复制在主机故障时，读操作相关的业务可以继续运行。
（2）主从复制架构的从机提供读操作，发挥了硬件的性能。
缺点：（1）主从复制架构中，客户端需要感知主从关系，并将不同的操作发给不同的机器进行处理，复杂度比主备复制要高。
（2）主从复制架构中，从机提供读业务，如果主从复制延迟比较大，业务会因为数据不一致出现问题。
（3）故障时需要人工干预。

综合主从复制的优缺点，一般情况下，写少读多的业务使用主从复制的存储架构比较多。

三、双击切换
1、设计关键
主备复制和主从复制方案存在两个共性的问题：
（1）主机故障后，无法进行写操作。
（2）如果主机无法恢复，需要人工指定新的主机角色。

双机切换就是为了解决这两个问题而产生的，包括主备切换和主从切换两种方案。
实现一个完善的切换方案，必须考虑这几个关键的设计点：
（1）主备间状态判断
主要包括两方面：状态传递的渠道，以及状态检测的内容。
1）状态传递的渠道：是相互间互相连接，还是第三仲裁？
2）状态检测内容：例如机器是否掉电，进程是否存在、响应是否缓慢等。
主要包括几方面：切换时机、切换策略、自动程度。
1）切换时机：什么情况下备机应该升级为主机？是机器掉电后备机才升级，还是主机上的进程不存在就升级，还是主机响应时间超过2秒就升级，还是3分钟内主机连续重启3次就升级等？
2）切换策略：原来的主机故障恢复后，要再次切换，确保原来的主机继续做主机，还是原来的主机故障恢复后自动成为新的备机？
3）自动程度：切换是完全自动的，还是半自动的？例如系统判断当前需要切换，但需要人工作最终的确认操作。

（2）数据冲突解决
当原有故障的主机恢复后，新旧主机之间可能存在数据冲突。

2、常见架构
（1）互连式
互连式就是指主备机直接建立状态传递的渠道，架构图请注意与主备复制架构对比。
互连式架构图逻辑关系：
客户端—>主机（->：读&写）
主机—>备机（->：数据复制）
主机—>备机（->：状态传递）
客户端- ->备机（-->：读&写（倒换后））

“状态传递”这个通道的具体实现方式：
1）可以是网络连接（例如各开一个端口），也可以是非网络连接（用串口线连接）。
2）可以是主机发送状态给备机，也可以是备机到主机来获取状态信息。
3）可以和数据复制通道共用，也可以独立一条通道。
4）状态传输通道可以是一条，也可以是多条，还可以是不同类型的通道混合。

为了充分利用切换方案能够自动决定主机这个优势，客户端这里也会有一些相应的改变，常见的方式有：
1）为了切换后不影响客户端的访问，主机和备机之间共享一个对客户端来说唯一的地址。
2）客户端同时记录主备机的地址，哪个能访问就访问哪个；备机虽然能收到客户端的操作请求，但是会直接拒绝，拒绝的原因就是“备机不对外提供服务”。

互连式主备切换主要的缺点在于：
1）如果状态床底的通道本身有故障，那么备机也会认为主机故障了从而将自己升级为主机，而此时主机并没有故障，最终就可能出现两个主机。

2）虽然可以通过增加对个通道来增强状态传递的可能性，但这样做只是降低了通道故障概率而已，不能从根本上解决这个缺点，而且通道越多，后续的状态决策会更加复杂，因为对备机来说，可能从不同的通道收到了不同甚至矛盾的状态信息。

（2）中介式
指的是在主备两者之外引入第三方中介，主备机之间不直接链接，而都去连接中介，并且通过中介来传递状态信息，其架构如下：
中介式架构图逻辑关系：
客户端—>主机（->：读&写）
主机—>备机（->：数据复制）
主机—>中介（->：状态上报）
中介—>备机（->：状态上报）
客户端- ->备机（-->：读&写（倒换后））

与互连式切换架构对比，主机和备机不再通过互联通道传递状态信息，而是都将状态上报给中介角色。事实上，中介架构在状态传递和决策上却更加简单。
原因：
1）谅解管理更加简单：主备机无须再建立和管理多种类型的状态传递连接通道，只要连接到中介即可，实际上是降低了主备机的连接管理复杂度。
2）状态决策更简单：无须考虑多种类型的连接通道获取的状态信息如何决策的问题，只要需要按照下面简单的算法即可完成状态决策。
* 无论是主机还是备机，初始状态都是备机，并且只要与中介断开连接，就将自己降级为备机，因此可能出现双备机的情况。
* 主机与中介断连后，中介能够立刻告知备机，备机将自己升级为主机。
* 如果是网络中断导致主机与中介断连，主机自己降级为备机，网络恢复后，旧的主机以新的备机身份向中介上报自己的状态。
* 如果掉电重启或者进程重启，旧的主机初始状态为备机，与中介恢复连接后，发现已经有主机了，保持自己备机状态不变。
* 主备机与中介链接都正常的情况下，按照实际的状态决定是否进行切换。

中介式架构，其关键代价：在于如何实现中介本省的高可用。
MongoDB 的Replica Set采取的就是这种方式，基本架构：
MongoDB client —>MongoDB（M）
MongoDB client -->MongoDB（S）
MongoDB（M）<->MongoDB（S）
MongoDB（A）—>MongoDB（S）

MongoDB（M）:主节点，存储数据
MongoDB（S）:备节点，存储数据
MongoDB（A）:仲裁节点，不存储数据

开源方案已经比较成熟的中介式解决方案：zookeeper、keepalived。在工程实践中推荐基于zookeeper搭建中介式切换架构。

（3）模拟式
模拟式指主备机之间并不传递任何状态数据，而是备机模拟成一个客户端，向主机发起模拟的读写操作，根据读写操作的响应情况来判断主机的状态，其基本架构如下：
架构图逻辑关系：
客户端—>主机（->：读&写）
主机—>备机（->：数据复制）
备机—>主机（-->：读&写（模拟））
客户端- ->备机（-->：读&写（倒换后））
与互连式切换架构对比，主机之间只有数据复制通道，而没有状态传递通道，备机通过模拟的读写操作来探测主机的状态，然后根据读写操作的响应情况来进行状态决策。
优点：实现更加简单，省去了状态传递通道的建立和管理工作。

四、主主复制
主主复制指的是两台机器都是主机，互相将数据复制给对方，客户端可以任意挑选一台主机进行读写操作。
架构图逻辑关系：
客户端—>主机A（->：读&写）
主机A—>主机B（->：数据复制）
主机B—>主机A（->：数据复制）
客户端- ->主机B（->：读&写）
与主备切换架构对比，主主复制架构具有如下特点：
1）两台都是主机，不存在切换的概念。
2）客户端无须区分不同角色的主机，随便将读写操作发送给哪台主机都可以。
该架构具有独特的复杂性，具体表现在：
    如果采取主主复制架构，必须保证数据能够双向复制，而很多数据是不能双向复制的。
主主复制架构对数据的设计有严格的要求，一般适合那些临时性、可丢失、可覆盖的数据场景。



